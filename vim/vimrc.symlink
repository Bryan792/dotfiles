set nocompatible          " get rid of Vi compatibility mode. SET FIRST!

" ----------------------------------------------------------------------------
"  Vundle
" ----------------------------------------------------------------------------

filetype off

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Plugin 'gmarik/vundle'
"Add your Plugins here
"    Plugin 'Syntastic' "uber awesome syntax and errors highlighter
"    Plugin 'altercation/vim-colors-solarized'
" T-H-E colorscheme
"    Plugin 'https://github.com/tpope/vim-fugitive' "So awesome, it should be illegal 
Plugin 'flazz/vim-colorschemes'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'chriskempson/base16-vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
" Plugin 'Shougo/unite.vim'
Plugin 'scrooloose/syntastic'
Plugin 'Shougo/vimproc'
" Plugin 'Shougo/vimshell'
Plugin 'scrooloose/nerdtree'
Plugin 'nathanaelkane/vim-indent-guides'
" Plugin 'mileszs/ack.vim'
Plugin 'jcf/vim-latex'
Plugin 'Chiel92/vim-autoformat'
Plugin 'airblade/vim-gitgutter' 
Plugin 'Valloric/YouCompleteMe'
Plugin 'einars/js-beautify'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'marijnh/tern_for_vim'
"Plugin 'Yggdroot/indentLine'
Plugin 'scrooloose/nerdcommenter'
Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'kien/ctrlp.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
"...All your other bundles...
"
if iCanHazVundle == 0
  echo "Installing Bundles, please ignore key map error messages"
  echo ""
  :BundleInstall
endif
" Setting up Vundle - the vim plugin bundler end

"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..


syntax on
filetype plugin indent on " filetype detection[ON] plugin[ON] indent[ON]
"set tabstop=2             " tab spacing
"set softtabstop=4         " unify
"set shiftround            " always indent/outdent to the nearest tabstop

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
"set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=2
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set textwidth=0           " wrap at 80 chars by default nope
set virtualedit=block      " allow virtual edit in visual block ..
" Messes with tab to spaces, needed so that no newline at EOF
"set binary
"set noeol
"set paste

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set t_Co=256              " enable 256-color mode.
set hidden
set ruler                  " show the cursor position all the time
set showcmd                " display incomplete commands
"set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set cursorline
set cursorcolumn
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set title
"Set colorscheme
colorscheme Tomorrow-Night-Eighties
"set background=dark
set scrolloff=3           " Start scrolling three lines before the horizontal window border
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

set nobackup
set nowb
set noswapfile


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmode
set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
"set hlsearch               " highlight searches
set visualbell             " shut the fuck up
set nohlsearch             " Don't continue to highlight searched phrases.

" ---------------------------------------------------------------------------
" System Options
" ---------------------------------------------------------------------------

set clipboard=unnamed
set modeline
set modelines=4
"set mouse=a
set exrc
set secure
set esckeys
set ttyfast
set gdefault
set encoding=utf-8 nobomb

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction
map <leader>s :call StripWhitespace ()<CR>

let g:indent_guides_guide_size = 1
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
set grepprg=grep\ -nH\ $*

set autoindent             " automatic indent new lines

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

map <C-n> :NERDTreeToggle<CR>

noremap <F8> :Autoformat<CR><CR>
noremap <F7> :Autoformat<CR><CR>

"let g:formatprg_args_expr_cs = '"--mode=cs --style=ansi -pcH".(&expandtab ? "s".&shiftwidth : "t")' 
let g:formatprg_args_expr_c = '"--style=allman --add-brackets --indent=spaces=2 --break-blocks --pad-oper --convert-tabs --delete-empty-lines --quiet"' 
let g:formatprg_args_expr_cpp = '"--style=allman --add-brackets --indent=spaces=2 --break-blocks --pad-oper --convert-tabs --delete-empty-lines --quiet"' 

let g:formatdef_esformatter = '"esformatter"'
let g:formatters_javascript = [
								\ 'esformatter',
                \ 'jsbeautify_javascript',
                \ 'pyjsbeautify_javascript',
                \ 'jscs'
                \ ]

cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Q ((getcmdtype() is# ':' && getcmdline() is# 'Q')?('q'):('Q'))
let g:EclimCompletionMethod = 'omnifunc'
let g:EclimMavenPomClasspathUpdate = 0
let g:Powerline_symbols = 'unicode'

function! GenerateUnicode(first, last)
  let i = a:first
  while i <= a:last
    if (i%256 == 0)
      $put ='----------------------------------------------------'
      $put ='     0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F '
      $put ='----------------------------------------------------'
    endif
    let c = printf('%04X ', i)
    for j in range(16)
      let c = c . nr2char(i) . ' '
      let i += 1
    endfor
    $put =c
  endwhile
endfunction

"cmap w!! w !sudo tee > /dev/null %
"cmap w!! :execute ':silent w !sudo tee % > /dev/null' | :edit!
command WW :execute ':silent w !sudo tee % > /dev/null' | :edit!
let g:ycm_add_preview_to_completeopt=0
let g:ycm_confirm_extra_conf=0
set completeopt-=preview

hi MatchParen cterm=bold ctermbg=none ctermfg=magenta


let g:formatprg_cuda = "astyle" 
let g:formatprg_args_expr_cuda = g:formatprg_args_expr_c 

" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

set undolevels=1000         " Maximum number of changes that can be undone
set undoreload=10000        " Maximum number lines to save for undo on a buffer reload

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

hi clear SpellBad
hi SpellBad cterm=bold,italic ctermfg=red

let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
set list
